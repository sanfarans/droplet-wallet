<strong>Droplet Wallet</strong><br />

<!-- Account Funding Section -->
<div id="account-fund-section">
  <h2>Fund Your Account</h2>
  <button id="account-fund-button">Fund My Account (Testnet)</button>
</div>

<!-- Initialize Wallet Section -->
<div id="init-section">
  <h2>Initialize Wallet</h2>
  <button id="init-button">Initialize Wallet</button>
</div>

<!-- Setup Charity Section -->
<div id="charity-section" style="display: none;">
  <h2>Setup Charity</h2>
  <label for="charity-address">Charity Address:</label>
  <input type="text" id="charity-address" placeholder="Enter Charity Stellar Address">
  <label for="charity-fee">Charity Fee (%):</label>
  <input type="number" id="charity-fee" placeholder="Enter Fee Percentage" value="1" min="0" max="100">
  <button id="setup-charity-button">Setup Charity</button>
</div>

<!-- Fund Wallet Section -->
<div id="fund-section" style="display: none;">
  <h2>Fund Wallet</h2>
  <label for="fund-amount">Amount to Fund (XLM):</label>
  <input type="number" id="fund-amount" placeholder="Enter Amount" min="0">
  <button id="fund-button">Fund Wallet</button>
</div>

<!-- Transfer Tokens Section -->
<div id="transfer-section" style="display: none;">
  <h2>Transfer Tokens</h2>
  <label for="transfer-to">Recipient Address:</label>
  <input type="text" id="transfer-to" placeholder="Enter Recipient Stellar Address">
  <label for="transfer-amount">Amount to Transfer (XLM):</label>
  <input type="number" id="transfer-amount" placeholder="Enter Amount" min="0">
  <button id="transfer-button">Transfer Tokens</button>
</div>

<script>
  import { kit, loadedPublicKey } from "../stellar-wallets-kit";
  import dropletWallet from "../contracts/droplet_wallet";

  const accountFundSection = document.getElementById("account-fund-section");
  const initSection = document.getElementById("init-section");
  const charitySection = document.getElementById("charity-section");
  const fundSection = document.getElementById("fund-section");
  const transferSection = document.getElementById("transfer-section");

  const accountFundButton = document.getElementById("account-fund-button");
  const initButton = document.getElementById("init-button");
  const setupCharityButton = document.getElementById("setup-charity-button");
  const fundButton = document.getElementById("fund-button");
  const transferButton = document.getElementById("transfer-button");

  async function accountExists(publicKey) {
    return true;
  }

  async function updateBalances() {
    return;
  }

  // Fund User's Account (Testnet Only)
  accountFundButton.addEventListener("click", async () => {
    const publicKey = loadedPublicKey();

    if (!publicKey) {
      alert("Please connect your wallet first");
      return;
    }

    accountFundButton.disabled = true;
    accountFundButton.classList.add("loading");

    try {
      const response = await fetch(`https://friendbot.stellar.org?addr=${encodeURIComponent(publicKey)}`);
      if (response.status === 200) {
        alert("Account funded successfully!");
        await updateBalances();
        accountFundSection.style.display = "none";
      } else {
        alert("Failed to fund account. Please try again.");
      }
    } catch (e) {
      console.error(e);
      alert("An error occurred while funding your account.");
    }

    accountFundButton.disabled = false;
    accountFundButton.classList.remove("loading");
  });

  // Initialize wallet
  initButton.addEventListener("click", async () => {
    const publicKey = loadedPublicKey();

    if (!publicKey) {
      alert("Please connect your wallet first");
      return;
    }

    dropletWallet.options.publicKey = publicKey;

    initButton.disabled = true;
    initButton.classList.add("loading");

    try {
      // Initialize the wallet
      const initTx = await dropletWallet.init({ owner: publicKey });
      const { result } = await initTx.signAndSend({
        signTransaction: async (xdr) => {
          const { signedTxXdr } = await kit.signTransaction(xdr);
          return signedTxXdr;
        },
      });

      alert("Wallet initialized successfully!");

      // Show charity setup section
      initSection.style.display = "none";
      charitySection.style.display = "block";

      // Update balances
      await updateBalances();
    } catch (e) {
      console.error(e);
      alert("An error occurred during initialization.");
    }

    initButton.disabled = false;
    initButton.classList.remove("loading");
  });

  // Setup charity
  setupCharityButton.addEventListener("click", async () => {
    const publicKey = loadedPublicKey();

    if (!publicKey) {
      alert("Please connect your wallet first");
      return;
    }

    dropletWallet.options.publicKey = publicKey;

    const charityAddress = document.getElementById("charity-address").value.trim();
    let charityFee = document.getElementById("charity-fee").value.trim();

    if (!charityAddress) {
      alert("Please enter a charity address");
      return;
    }

    if (!charityFee) {
      charityFee = 1; // Default to 1%
    }

    // Convert fee percentage to bips
    const feeInBips = parseInt(charityFee) * 100;

    setupCharityButton.disabled = true;
    setupCharityButton.classList.add("loading");

    try {
      // Setup charity
      const setupCharityTx = await dropletWallet.setup_charity({
        charity_address: charityAddress,
        fee: feeInBips,
      });
      const { result } = await setupCharityTx.signAndSend({
        signTransaction: async (xdr) => {
          const { signedTxXdr } = await kit.signTransaction(xdr);
          return signedTxXdr;
        },
      });

      alert("Charity setup successfully!");

      // Show fund and transfer sections
      charitySection.style.display = "none";
      fundSection.style.display = "block";
      transferSection.style.display = "block";

      // Update balances
      await updateBalances();
    } catch (e) {
      console.error(e);
      alert("An error occurred during charity setup.");
    }

    setupCharityButton.disabled = false;
    setupCharityButton.classList.remove("loading");
  });

  // Fund wallet
  fundButton.addEventListener("click", async () => {
    const publicKey = loadedPublicKey();

    if (!publicKey) {
      alert("Please connect your wallet first");
      return;
    }

    dropletWallet.options.publicKey = publicKey;

    const fundAmount = document.getElementById("fund-amount").value.trim();

    if (!fundAmount || parseFloat(fundAmount) <= 0) {
      alert("Please enter a valid amount to fund");
      return;
    }

    fundButton.disabled = true;
    fundButton.classList.add("loading");

    try {
      const amountInStroops = (parseFloat(fundAmount) * 1e7).toString();

      const fundTx = await dropletWallet.fund({
        token_address: 'native',
        amount: amountInStroops,
      });

      const { result } = await fundTx.signAndSend({
        signTransaction: async (xdr) => {
          const { signedTxXdr } = await kit.signTransaction(xdr);
          return signedTxXdr;
        },
      });

      alert("Wallet funded successfully!");

      // Update balances
      await updateBalances();
    } catch (e) {
      console.error(e);
      alert("An error occurred while funding the wallet.");
    }

    fundButton.disabled = false;
    fundButton.classList.remove("loading");
  });

  // Transfer tokens
  transferButton.addEventListener("click", async () => {
    const publicKey = loadedPublicKey();

    if (!publicKey) {
      alert("Please connect your wallet first");
      return;
    }

    dropletWallet.options.publicKey = publicKey;

    const recipientAddress = document.getElementById("transfer-to").value.trim();
    const transferAmount = document.getElementById("transfer-amount").value.trim();

    if (!recipientAddress) {
      alert("Please enter a recipient address");
      return;
    }

    if (!transferAmount || parseFloat(transferAmount) <= 0) {
      alert("Please enter a valid amount to transfer");
      return;
    }

    transferButton.disabled = true;
    transferButton.classList.add("loading");

    try {
      const amountInStroops = (parseFloat(transferAmount) * 1e7).toString();

      const transferTx = await dropletWallet.transfer({
        token_address: 'native',
        to: recipientAddress,
        amount: amountInStroops,
      });

      const { result } = await transferTx.signAndSend({
        signTransaction: async (xdr) => {
          const { signedTxXdr } = await kit.signTransaction(xdr);
          return signedTxXdr;
        },
      });

      alert("Tokens transferred successfully!");

      // Update balances
      await updateBalances();
    } catch (e) {
      console.error(e);
      alert("An error occurred during the transfer.");
    }

    transferButton.disabled = false;
    transferButton.classList.remove("loading");
  });

  // On page load
  window.addEventListener("load", async () => {
    const publicKey = loadedPublicKey();

    if (!publicKey) {
      alert("Please connect your wallet first");
      return;
    }

    dropletWallet.options.publicKey = publicKey;

    // Check if user's account exists
    const exists = await accountExists(publicKey);

    if (!exists) {
      alert("Your account does not exist on the network. Please fund your account.");
      accountFundSection.style.display = "block";
      initSection.style.display = "none";
      charitySection.style.display = "none";
      fundSection.style.display = "none";
      transferSection.style.display = "none";
      return;
    } else {
      accountFundSection.style.display = "none";
    }

    // Update balances
    await updateBalances();

    // Check if the wallet is initialized
    try {
      // Implement a method to check if the wallet is initialized
      // For demonstration purposes, we'll assume it's not initialized
      const isInitialized = true; // Replace with actual check

      if (isInitialized) {
        initSection.style.display = "none";
        charitySection.style.display = "none";
        fundSection.style.display = "block";
        transferSection.style.display = "block";
      } else {
        initSection.style.display = "block";
        charitySection.style.display = "none";
        fundSection.style.display = "none";
        transferSection.style.display = "none";
      }
    } catch (e) {
      console.error(e);
    }
  });
</script>
